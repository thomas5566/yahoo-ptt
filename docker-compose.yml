# Version of Docker compose
version: "3.7"

services:
    # name of the service
    # we're going to have a service called app and the build section of the configuration
    web:
        build: ./app
            # . is meaing our current directory that we're running Docker compose from
            # context: .
        ports:
            # map our porject from port 8000 on host to port 8000 on Docker image
            - "8000:8000"
        # Volume allows us to get the updates that we make to our project
        # into Docker image in real time
        volumes:
            # maps the app directory to the app directory in Docker image
            - ./app/:/usr/src/app/
        # run command using shell
        # run the Django development server available on all the IP address
        # that run on the Docker container and run port 8000 at local machine
        command: >
            sh -c "python manage.py migrate &&
                    python manage.py runserver 0.0.0.0:8000"
        env_file:
            - ./.env.dev
        # environment:
        #     # equal db
        #     - DB_HOST=db
        #     # equal POSTGRES_DB
        #     - DB_NAME=best_movie
        #     # equal POSTGRES_USER
        #     - DB_USER=postgres
        #     # equal POSTGRES_PASSWORD
        #     - DB_PASS=1234
        # Add the depends on the setting
        # when run docker compose can set diffrent services to depend on other services
        # we want our app depend on the database service that we create
        # 1) the database service will start befort the app service
        # 2) the database service will be availble via the network when you use the hostname DB_HOST=db
        depends_on:
            - db
    db:
        image: postgres:12.0-alpine
        restart: always
        volumes:
          - pgdata:/var/lib/postgresql/data/
        environment:
            # setting that the Postgres container is expecting when it starts
            - POSTGRES_DB=best_movie
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=supersecretpassword

volumes:
  pgdata:
    external: true